{
	"info": {
		"_postman_id": "8dfa4685-8f52-497b-a0ad-4ef17c45bde4",
		"name": "especialista-chat-atendimento_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31291289"
	},
	"item": [
		{
			"name": "user_create",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const fakerBr = pm.require('npm:faker-br@0.5.0');\r",
							"\r",
							"function gerarNumerosAleatorios(qtdeDigitos) {\r",
							"  var text = \"\";\r",
							"  var possible = \"0123456789\";\r",
							"\r",
							"  for (var i = 0; i < qtdeDigitos; i++)\r",
							"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
							"\r",
							"  return text;\r",
							"}\r",
							"\r",
							"function gerarNome(){\r",
							"    var nomes = [\r",
							"        \"Alice\",\r",
							"        \"Amanda\",\r",
							"        \"Ana\",\r",
							"        \"André\",\r",
							"        \"Anthony\",\r",
							"        \"Arthur\",\r",
							"        \"Augusto\",\r",
							"        \"Beatriz\",\r",
							"        \"Benjamin\",\r",
							"        \"Bernardo\",\r",
							"        \"Bianca\",\r",
							"        \"Breno\",\r",
							"        \"Caio\",\r",
							"        \"Camila\",\r",
							"        \"Carla\",\r",
							"        \"Carolina\",\r",
							"        \"Catarina\",\r",
							"        \"Cecília\",\r",
							"        \"Clara\",\r",
							"        \"Daniel\",\r",
							"        \"Davi\",\r",
							"        \"Diego\",\r",
							"        \"Eduardo\",\r",
							"        \"Emanuelly\",\r",
							"        \"Enzo\",\r",
							"        \"Evelyn\",\r",
							"        \"Fábio\",\r",
							"        \"Felipe\",\r",
							"        \"Fernando\",\r",
							"        \"Francisco\",\r",
							"        \"Gabriel\",\r",
							"        \"Gabriela\",\r",
							"        \"Guilherme\",\r",
							"        \"Gustavo\",\r",
							"        \"Helena\",\r",
							"        \"Henrique\",\r",
							"        \"Isabel\",\r",
							"        \"Isabela\",\r",
							"        \"Isabella\",\r",
							"        \"Isadora\",\r",
							"        \"Jó\",\r",
							"        \"Joana\",\r",
							"        \"João\",\r",
							"        \"Júlia\",\r",
							"        \"Juliana\",\r",
							"        \"Kevin\",\r",
							"        \"Laís\",\r",
							"        \"Lara\",\r",
							"        \"Larissa\",\r",
							"        \"Laura\",\r",
							"        \"Lavinia\",\r",
							"        \"Leonardo\",\r",
							"        \"Letícia\",\r",
							"        \"Lívia\",\r",
							"        \"Ló\",\r",
							"        \"Lorena\",\r",
							"        \"Lorenzo\",\r",
							"        \"Luana\",\r",
							"        \"Lucas\",\r",
							"        \"Lucca\",\r",
							"        \"Luciano\",\r",
							"        \"Luiza\",\r",
							"        \"Luna\",\r",
							"        \"Manuela\",\r",
							"        \"Marcelo\",\r",
							"        \"Maria\",\r",
							"        \"Mariana\",\r",
							"        \"Mariane\",\r",
							"        \"Melissa\",\r",
							"        \"Miguel\",\r",
							"        \"Mirella\",\r",
							"        \"Murilo\",\r",
							"        \"Natália\",\r",
							"        \"Nathália\",\r",
							"        \"Nicolas\",\r",
							"        \"Otávio\",\r",
							"        \"Paulo\",\r",
							"        \"Pedro\",\r",
							"        \"Pietra\",\r",
							"        \"Rafael\",\r",
							"        \"Raul\",\r",
							"        \"Rebeca\",\r",
							"        \"Ricardo\",\r",
							"        \"Roberto\",\r",
							"        \"Rodrigo\",\r",
							"        \"Ruan\",\r",
							"        \"Samuel\",\r",
							"        \"Sofia\",\r",
							"        \"Sophia\",\r",
							"        \"Stella\",\r",
							"        \"Thiago\",\r",
							"        \"Tomás\",\r",
							"        \"Valentina\",\r",
							"        \"Vinícius\",\r",
							"        \"Vitor\",\r",
							"        \"Vitória\",\r",
							"        \"Yasmin\"\r",
							"    ];\r",
							"\r",
							"    var nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
							"\r",
							"    return nome;\r",
							"}\r",
							"\r",
							"function gerarSobrenome(){\r",
							"    var sobrenomes = [\r",
							"        \"Abreu\",\r",
							"        \"Aguiar\",\r",
							"        \"Albuquerque\",\r",
							"        \"Almeida\",\r",
							"        \"Alves\",\r",
							"        \"Andrade\",\r",
							"        \"Araújo\",\r",
							"        \"Azevedo\",\r",
							"        \"Barbosa\",\r",
							"        \"Barros\",\r",
							"        \"Batista\",\r",
							"        \"Borges\",\r",
							"        \"Braga\",\r",
							"        \"Campos\",\r",
							"        \"Cardoso\",\r",
							"        \"Carneiro\",\r",
							"        \"Carvalho\",\r",
							"        \"Castro\",\r",
							"        \"Cavalcante\",\r",
							"        \"Cavalcanti\",\r",
							"        \"Coelho\",\r",
							"        \"Correia\",\r",
							"        \"Costa\",\r",
							"        \"Coutinho\",\r",
							"        \"Cruz\",\r",
							"        \"Cunha\",\r",
							"        \"Dantas\",\r",
							"        \"Dias\",\r",
							"        \"Farias\",\r",
							"        \"Fernandes\",\r",
							"        \"Ferreira\",\r",
							"        \"Fialho\",\r",
							"        \"Figueiredo\",\r",
							"        \"Fonseca\",\r",
							"        \"Freitas\",\r",
							"        \"Furtado\",\r",
							"        \"Gomes\",\r",
							"        \"Gonçalves\",\r",
							"        \"Goulart\",\r",
							"        \"Gusmão\",\r",
							"        \"Leite\",\r",
							"        \"Lemos\",\r",
							"        \"Lima\",\r",
							"        \"Lopes\",\r",
							"        \"Lu\",\r",
							"        \"Macedo\",\r",
							"        \"Machado\",\r",
							"        \"Marques\",\r",
							"        \"Martins\",\r",
							"        \"Melo\",\r",
							"        \"Mendes\",\r",
							"        \"Monteiro\",\r",
							"        \"Moraes\",\r",
							"        \"Morais\",\r",
							"        \"Moreira\",\r",
							"        \"Moura\",\r",
							"        \"Neves\",\r",
							"        \"Nogueira\",\r",
							"        \"Nunes\",\r",
							"        \"Oliveira\",\r",
							"        \"Pacheco\",\r",
							"        \"Peixoto\",\r",
							"        \"Pereira\",\r",
							"        \"Pires\",\r",
							"        \"Prado\",\r",
							"        \"Ramos\",\r",
							"        \"Rezende\",\r",
							"        \"Ribeiro\",\r",
							"        \"Rocha\",\r",
							"        \"Rodrigues\",\r",
							"        \"Sá\",\r",
							"        \"Sales\",\r",
							"        \"Sampaio\",\r",
							"        \"Santos\",\r",
							"        \"Saraiva\",\r",
							"        \"Silva\",\r",
							"        \"Silveira\",\r",
							"        \"Sousa\",\r",
							"        \"Souza\",\r",
							"        \"Tavares\",\r",
							"        \"Teixeira\",\r",
							"        \"Valente\",\r",
							"        \"Vargas\",\r",
							"        \"Vieira\",\r",
							"        \"Xavier\"\r",
							"    ];\r",
							"\r",
							"    var sobrenome = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];\r",
							"\r",
							"    return sobrenome;\r",
							"}\r",
							"\r",
							"function gerarEmail(nome, sobrenome){\r",
							"    var dominiosEmail = [\r",
							"        \"@gmail.com\",\r",
							"        \"@outlook.com\",\r",
							"        \"@yahoo.com\",\r",
							"        \"@icloud.com\",\r",
							"        \"@protonmail.com\",\r",
							"        \"@hotmail.com.br\"\r",
							"    ];\r",
							"    \r",
							"    var dominioEmail = dominiosEmail[Math.floor(Math.random() * dominiosEmail.length)];\r",
							"    var nomeNormalizado = nome.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g,\"\");\r",
							"    var sobrenomeNormalizado = sobrenome.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g,\"\");\r",
							"    var email = nomeNormalizado + \".\" + sobrenomeNormalizado + \".\" + gerarNumerosAleatorios(6) + dominioEmail;\r",
							"\r",
							"    return email;\r",
							"}\r",
							"\r",
							"function gerarCelular(){\r",
							"    var ddds = [\r",
							"        \"11\",\r",
							"        \"12\",\r",
							"        \"13\",\r",
							"        \"14\",\r",
							"        \"15\",\r",
							"        \"16\",\r",
							"        \"17\",\r",
							"        \"18\",\r",
							"        \"19\",\r",
							"        \"21\",\r",
							"        \"22\",\r",
							"        \"24\",\r",
							"        \"27\",\r",
							"        \"28\",\r",
							"        \"31\",\r",
							"        \"32\",\r",
							"        \"33\",\r",
							"        \"34\",\r",
							"        \"35\",\r",
							"        \"37\",\r",
							"        \"38\",\r",
							"        \"41\",\r",
							"        \"42\",\r",
							"        \"43\",\r",
							"        \"44\",\r",
							"        \"45\",\r",
							"        \"46\",\r",
							"        \"47\",\r",
							"        \"48\",\r",
							"        \"49\",\r",
							"        \"51\",\r",
							"        \"53\",\r",
							"        \"54\",\r",
							"        \"55\",\r",
							"        \"61\",\r",
							"        \"62\",\r",
							"        \"63\",\r",
							"        \"64\",\r",
							"        \"65\",\r",
							"        \"66\",\r",
							"        \"67\",\r",
							"        \"68\",\r",
							"        \"69\",\r",
							"        \"71\",\r",
							"        \"73\",\r",
							"        \"74\",\r",
							"        \"75\",\r",
							"        \"77\",\r",
							"        \"79\",\r",
							"        \"81\",\r",
							"        \"82\",\r",
							"        \"83\",\r",
							"        \"84\",\r",
							"        \"85\",\r",
							"        \"86\",\r",
							"        \"87\",\r",
							"        \"88\",\r",
							"        \"89\",\r",
							"        \"91\",\r",
							"        \"92\",\r",
							"        \"93\",\r",
							"        \"94\",\r",
							"        \"95\",\r",
							"        \"96\",\r",
							"        \"97\",\r",
							"        \"98\",\r",
							"        \"99\"\r",
							"    ];\r",
							"\r",
							"    var ddd = ddds[Math.floor(Math.random() * ddds.length)];\r",
							"    var celular = ddd + \"9\" + gerarNumerosAleatorios(8);\r",
							"\r",
							"    return celular;\r",
							"}\r",
							"\r",
							"// validar a senha de acordo com as regras\r",
							"function validarSenha(senha) {\r",
							"    const regraTamanho = senha.length >= 8 && senha.length <= 16;\r",
							"    const regraMaiuscula = /[A-Z]/.test(senha);\r",
							"    const regraMinuscula = /[a-z]/.test(senha);\r",
							"    const regraNumero = /\\d/.test(senha);\r",
							"    const regraEspecial = /[!@#$%^&*()_+\\[\\]{}<>?,.]/.test(senha);\r",
							"\r",
							"    return regraTamanho && regraMaiuscula && regraMinuscula && regraNumero && regraEspecial;\r",
							"}\r",
							"\r",
							"function gerarSenha() {\r",
							"    const maiusculo = fakerBr.lorem.word(1).toUpperCase(); // 1 letra maiúscula\r",
							"    const minusculo = fakerBr.lorem.word(1).toLowerCase(); // 1 letra minúscula\r",
							"    const numero = fakerBr.random.number({ min: 0, max: 9 }).toString(); // 1 número\r",
							"    const caracteresEspeciais = \"!@#$%^&*()_+[]{}<>?,.\";\r",
							"    const especial = caracteresEspeciais.charAt(fakerBr.random.number({ min: 0, max: caracteresEspeciais.length - 1 }));\r",
							"\r",
							"    // tamanho final entre 8 e 16\r",
							"    const tamanhoFinal = fakerBr.random.number({ min: 8, max: 16 });\r",
							"\r",
							"    // caracteres restantes para preencher\r",
							"    const todosCaracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\" + caracteresEspeciais;\r",
							"    var restante = \"\";\r",
							"    for (var i = 0; i < tamanhoFinal - 4; i++) {\r",
							"        restante += todosCaracteres.charAt(fakerBr.random.number({ min: 0, max: todosCaracteres.length - 1 }));\r",
							"    }\r",
							"\r",
							"    // senha com todos os requisitos\r",
							"    var senha = maiusculo + minusculo + numero + especial + restante;\r",
							"\r",
							"    // embaralhar para evitar padrão previsível\r",
							"    senha = senha.split('').sort(() => Math.random() - 0.5).join('');\r",
							"\r",
							"    return senha;\r",
							"}\r",
							"\r",
							"// gerar senha até ser válida\r",
							"var senhaGerada;\r",
							"do {\r",
							"    senhaGerada = gerarSenha();\r",
							"} while (!validarSenha(senhaGerada));\r",
							"\r",
							"pm.environment.set(\"name\", gerarNome());\r",
							"pm.environment.set(\"surname\", gerarSobrenome());\r",
							"pm.environment.set(\"mail\", gerarEmail(pm.environment.get(\"name\"), pm.environment.get(\"surname\")));\r",
							"pm.environment.set(\"phone\", gerarCelular());\r",
							"pm.environment.set(\"password\", senhaGerada);\r",
							"pm.environment.set(\"confirmPassword\", pm.environment.get(\"password\"));"
						],
						"type": "text/javascript",
						"packages": {
							"npm:faker-br@0.5.0": {
								"id": "npm:faker-br@0.5.0"
							}
						},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Check if ID is not empty\", function() {",
							"    pm.expect(pm.response.json().id).to.exist;",
							"    pm.environment.set(\"UserId\", pm.response.json().id);",
							"});",
							"",
							"pm.test(\"Check if Name is true\", function() {",
							"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));",
							"});",
							"",
							"pm.test(\"Check if Surname is true\", function() {",
							"    pm.expect(pm.response.json().surname).to.eql(pm.environment.get(\"surname\"));",
							"});",
							"",
							"pm.test(\"Check if Mail is true\", function() {",
							"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"mail\"));",
							"});",
							"",
							"pm.test(\"Check if Phone is true\", function() {",
							"    pm.expect(pm.response.json().phone).to.eql(pm.environment.get(\"phone\"));",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"surname\": \"{{surname}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"phone\": \"{{phone}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"confirmPassword\": \"{{confirmPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_auth_login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Validate authenticate msg\", function() {",
							"    pm.expect(pm.response.json().message).to.eql(pm.globals.get(\"MsgAuth\"))",
							"})",
							"",
							"pm.test(\"Token is true\", function() {",
							"    pm.expect(pm.response.json().token).to.not.be.empty;",
							"})",
							"",
							"pm.test(\"User Id is true\", function() {",
							"    pm.expect(pm.response.json().user.id).to.eql(pm.environment.get(\"UserId\"))",
							"})",
							"",
							"pm.test(\"Name Id is true\", function() {",
							"    pm.expect(pm.response.json().user.name).to.eql(pm.environment.get(\"name\"))",
							"})",
							"",
							"pm.test(\"Surname Id is true\", function() {",
							"    pm.expect(pm.response.json().user.surname).to.eql(pm.environment.get(\"surname\"))",
							"})"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"mail\": \"{{mail}}\",\n    \"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_get_list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains an array\", function () {\r",
							"    pm.expect(Array.isArray(pm.response.json())).to.be.true;\r",
							"    pm.expect(pm.response.json().length).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the id parameter\", function () {\r",
							"    pm.expect(pm.response.json()[0]).to.have.property('id');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_get_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check if ID is not empty\", function() {",
							"    pm.expect(pm.response.json().id).to.exist;",
							"    pm.environment.set(\"UserId\", pm.response.json().id);",
							"});",
							"",
							"pm.test(\"Check if Name is true\", function() {",
							"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));",
							"});",
							"",
							"pm.test(\"Check if Surname is true\", function() {",
							"    pm.expect(pm.response.json().surname).to.eql(pm.environment.get(\"surname\"));",
							"});",
							"",
							"pm.test(\"Check if Mail is true\", function() {",
							"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"mail\"));",
							"});",
							"",
							"pm.test(\"Check if Phone is true\", function() {",
							"    pm.expect(pm.response.json().phone).to.eql(pm.environment.get(\"phone\"));",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/{{UserId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{UserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_update",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const fakerBr = pm.require('npm:faker-br@0.5.0');",
							"",
							"function userName() {",
							"    let firstName = pm.variables.replaceIn('{{$randomFirstName}}').replace(/[^a-zA-Z ]|-/g, '');",
							"    pm.environment.set(\"NameUpdate\", firstName);",
							"}",
							"userName();",
							"",
							"function userSurname() {",
							"    let lastName = pm.variables.replaceIn('{{$randomLastName}}').replace(/[^a-zA-Z ]|-/g, '');",
							"    pm.environment.set(\"SurnameUpdate\", lastName);",
							"}",
							"userSurname();",
							"",
							"function providerMail() {",
							"    let providerMail = [\"@yahoo.com.br\", \"@gmail.com\", \"@outlook.com\", \"@hotmail.com\", \"@uol.com.br\"]",
							"",
							"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];",
							"",
							"    return randomItem",
							"}",
							"pm.environment.set(\"ProviderMail\", providerMail());",
							"",
							"function userMail() {",
							"    const firstName = pm.environment.get(\"NameUpdate\").toLowerCase();",
							"    const lastName = pm.environment.get(\"SurnameUpdate\").toLowerCase();",
							"    const domain = pm.environment.get(\"ProviderMail\");",
							"   ",
							"    const email = `${firstName}.${lastName}@${domain}`;",
							"    pm.environment.set(\"MailUpdate\", email);",
							"}",
							"userMail();",
							"",
							"function telephone() {",
							"    let DDDs = [11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 27, 28, 31, 32, 33, 34, 35, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 61, 62, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99];",
							"",
							"    let randomDDD = DDDs[Math.floor(Math.random() * DDDs.length)];",
							"",
							"    let numberPhone = '';",
							"    for (let i = 0; i < 8; i++) {",
							"        numberPhone += Math.floor(Math.random() * 10);",
							"    }",
							"",
							"    return  randomDDD + \"9\" + numberPhone;",
							"}",
							"pm.environment.set(\"PhoneUpdate\", telephone());",
							"",
							"// validar a senha de acordo com as regras",
							"function validarSenha(senha) {",
							"    const regraTamanho = senha.length >= 8 && senha.length <= 16;",
							"    const regraMaiuscula = /[A-Z]/.test(senha);",
							"    const regraMinuscula = /[a-z]/.test(senha);",
							"    const regraNumero = /\\d/.test(senha);",
							"    const regraEspecial = /[!@#$%^&*()_+\\[\\]{}<>?,.]/.test(senha);",
							"",
							"    return regraTamanho && regraMaiuscula && regraMinuscula && regraNumero && regraEspecial;",
							"}",
							"",
							"function gerarSenha() {",
							"    const maiusculo = fakerBr.lorem.word(1).toUpperCase(); // 1 letra maiúscula",
							"    const minusculo = fakerBr.lorem.word(1).toLowerCase(); // 1 letra minúscula",
							"    const numero = fakerBr.random.number({ min: 0, max: 9 }).toString(); // 1 número",
							"    const caracteresEspeciais = \"!@#$%^&*()_+[]{}<>?,.\";",
							"    const especial = caracteresEspeciais.charAt(fakerBr.random.number({ min: 0, max: caracteresEspeciais.length - 1 }));",
							"",
							"    // tamanho final entre 8 e 16",
							"    const tamanhoFinal = fakerBr.random.number({ min: 8, max: 16 });",
							"",
							"    // caracteres restantes para preencher",
							"    const todosCaracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\" + caracteresEspeciais;",
							"    var restante = \"\";",
							"    for (var i = 0; i < tamanhoFinal - 4; i++) {",
							"        restante += todosCaracteres.charAt(fakerBr.random.number({ min: 0, max: todosCaracteres.length - 1 }));",
							"    }",
							"",
							"    // senha com todos os requisitos",
							"    var senha = maiusculo + minusculo + numero + especial + restante;",
							"",
							"    // embaralhar para evitar padrão previsível",
							"    senha = senha.split('').sort(() => Math.random() - 0.5).join('');",
							"",
							"    return senha;",
							"}",
							"",
							"// gerar senha até ser válida",
							"var senhaGerada;",
							"do {",
							"    senhaGerada = gerarSenha();",
							"} while (!validarSenha(senhaGerada));",
							"pm.environment.set(\"passwordUpdate\", senhaGerada);"
						],
						"type": "text/javascript",
						"packages": {
							"npm:faker-br@0.5.0": {
								"id": "npm:faker-br@0.5.0"
							}
						},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"Validate update message\", function() {",
							"    pm.expect(pm.globals.get(\"MsgUpdate\")).to.eql(pm.response.json().message);",
							"})",
							"",
							"pm.test(\"Check if ID is not empty\", function() {",
							"    pm.expect(pm.response.json().data.id).to.exist;",
							"})",
							"",
							"pm.test(\"Check if name has been updated\", function() {",
							"    pm.expect(pm.environment.get(\"NameUpdate\")).to.eql(pm.response.json().data.name);",
							"});",
							"",
							"pm.test(\"Check if surname has been updated\", function() {",
							"    pm.expect(pm.environment.get(\"SurnameUpdate\")).to.eql(pm.response.json().data.surname);",
							"});",
							"",
							"pm.test(\"Check if mail has been updated\", function() {",
							"    pm.expect(pm.environment.get(\"MailUpdate\")).to.eql(pm.response.json().data.mail);",
							"});",
							"",
							"pm.test(\"Check if phone has been updated\", function() {",
							"    pm.expect(pm.environment.get(\"PhoneUpdate\")).to.eql(pm.response.json().data.phone);",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{NameUpdate}}\",\n    \"surname\": \"{{SurnameUpdate}}\",\n    \"mail\": \"{{MailUpdate}}\",\n    \"phone\": \"{{PhoneUpdate}}\",\n    \"password\": \"{{passwordUpdate}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/user/{{UserId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{UserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_delete_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate msg delete\", function() {\r",
							"    pm.expect(pm.response.json().msg).to.eql(pm.globals.get(\"idUserObtido\"))\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/{{UserId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{UserId}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "phone",
			"value": ""
		}
	]
}